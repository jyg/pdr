#N canvas 302 56 767 480 12;
#X declare -path ../../../core;
#X declare -path ../../../core/stuff;
#X declare -path ../../../core/rj;
#N canvas 289 76 585 411 audio_stuff 0;
#X obj 136 89 inlet~;
#X obj 242 239 outlet~;
#X obj 136 237 outlet~;
#N canvas 16 50 826 586 engine 0;
#X obj 55 187 s~ \$0-in;
#X obj 55 243 catch~ \$0-out;
#X obj 50 446 outlet~;
#X obj 52 141 phasor~;
#X obj 50 95 mtof;
#X obj 50 3 inlet;
#X obj 52 23 t f b;
#X msg 99 75 0;
#X obj 106 26 * 12;
#X obj 53 73 +;
#X obj 63 49 t b f;
#X obj 106 4 r \$0-oct;
#X obj 50 291 /~ 256;
#X obj 52 268 expr~ $v1%256;
#X obj 47 316 hip~ 5;
#N canvas 0 50 450 300 \$0-core 0;
#X restore 52 214 pd \$0-core;
#X obj 53 166 *~ 524288;
#X obj 50 115 / 2048;
#X text 131 70 reset phase;
#X text 121 168 (=65536*16);
#N canvas 0 60 1005 566 dynamic_patching 0;
#X obj 371 322 s pd-\$0-core;
#X obj 487 177 t b b l;
#X obj 511 243 delay 100;
#X obj 483 321 delay 200;
#X obj 487 424 f;
#X obj 520 379 f;
#X obj 486 445 s \$0-p1;
#X obj 521 422 s \$0-p1;
#X obj 457 146 pack s \$0;
#X obj 254 132 text get 8bit;
#X obj 486 344 t b b;
#X msg 553 208 clear \, obj 0 0 r~ \$2-in \, obj 100 0 r \$2-p1 \,
obj 200 0 r \$2-p2 \, obj 0 20 expr~ \$1 \, obj 0 40 throw~ \$2-out
;
#X obj 254 155 list split 1;
#X obj 523 47 r \$0-chain;
#X obj 355 209 s \$0-chain;
#X obj 253 185 select symbol;
#X obj 358 186 t s s;
#X obj 257 79 metro 1000;
#X msg 257 104 0;
#X obj 395 78 text set 8bit;
#X obj 366 4 r \$0-chain;
#X obj 393 53 t s b;
#X msg 475 55 0;
#N canvas 261 106 552 344 from/to 0;
#X symbolatom 71 226 10 0 0 0 - - -;
#X obj 71 249 list fromsymbol;
#X text 92 15 fromsymbol and tosymbol - symbols to and from lists of
numeric character codes, f 41;
#X msg 237 204 115 101 118 101 110 116 101 101 110;
#X obj 236 232 list tosymbol;
#X obj 71 273 print from-symbol;
#X text 39 69 These allow you to do string manipulations (such as scanning
a filename for '/' characters). THey convert a list of numbers (which
might be ASCII or might be unicode if \, for example \, they represent
a filename on a non-ASCII machine) to or from a symbol., f 63;
#X symbolatom 236 258 10 0 0 0 - - -;
#X msg 71 200 symbol seventeen;
#X connect 0 0 1 0;
#X connect 1 0 5 0;
#X connect 3 0 4 0;
#X connect 4 0 7 0;
#X connect 8 0 0 0;
#X restore 115 187 pd from/to;
#X obj 59 259 print;
#X obj 68 229 list fromsymbol;
#X msg 52 120 symbol $v1;
#X msg 82 154 symbol t;
#X msg 658 90 ($v1>>(11*$f2))|($v1%(11.2*$f2)) \;;
#X msg 114 96 symbol $f2;
#X msg 101 48 symbol a;
#N canvas 480 90 562 483 convertisseur 0;
#X obj 94 23 inlet;
#N canvas 116 50 673 426 serializer 0;
#X obj 19 287 list split 1;
#X obj 19 204 until;
#X obj 19 242 list append;
#X obj 45 171 t b l;
#X obj 149 287 bang;
#X msg 45 148 1 2 3 4 a b c;
#X text 34 21 example 3: serializing a message without delays;
#X text 17 55 The "until" object can be used as shown to iterate through
all the items of a list.;
#X text 178 147 <- click to test;
#X text 101 171 First store list \, then start the loop;
#X text 118 199 "until" bangs its output until told to stop by a "bang"
to its right inlet.;
#X text 137 241 Store the remaining list.;
#X text 194 286 third outlet of "split" tells us to stop.;
#X text 67 318 Second outlet of "split" becomes the new list for "list
append" above.;
#X text 175 387 First outlet is the output.;
#X obj 42 125 inlet;
#X obj 119 388 outlet;
#X obj 15 382 outlet done;
#X connect 0 0 16 0;
#X connect 0 1 2 1;
#X connect 0 2 4 0;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X connect 3 0 1 0;
#X connect 3 1 2 1;
#X connect 4 0 1 1;
#X connect 4 0 17 0;
#X connect 5 0 3 0;
#X connect 15 0 3 0;
#X restore 138 125 pd serializer;
#X msg 175 186 36 118 49;
#X obj 181 296 list prepend;
#X obj 325 298 list;
#X obj 164 354 list append;
#X obj 146 68 list fromsymbol;
#X obj 168 388 list tosymbol;
#X msg 257 187 36 102 50;
#X text 214 208 $v1;
#X obj 239 154 select 116 65 97 66 98;
#X msg 347 187 36 102 51;
#X text 276 210 $f2;
#X text 373 208 $f3;
#X obj 150 443 outlet;
#X obj 126 222 t b b;
#X obj 159 44 symbol;
#X connect 0 0 16 0;
#X connect 1 0 15 0;
#X connect 1 1 10 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 3 0 5 1;
#X connect 4 0 3 1;
#X connect 5 0 7 0;
#X connect 6 0 1 0;
#X connect 7 0 14 0;
#X connect 8 0 3 0;
#X connect 10 0 2 0;
#X connect 10 1 8 0;
#X connect 10 2 8 0;
#X connect 10 3 11 0;
#X connect 10 4 11 0;
#X connect 10 5 3 0;
#X connect 11 0 3 0;
#X connect 15 0 4 0;
#X connect 15 1 5 0;
#X connect 16 0 6 0;
#X restore 453 128 pd convertisseur;
#X obj 511 401 r \$0-A;
#X obj 532 357 r \$0-B;
#X msg 118 362 set \$1;
#X msg 512 268 connect 0 0 3 0 \, connect 1 0 3 1 \, connect 2 0 3
2 \, connect 3 0 4 0;
#X obj 220 383 print \$0-chain;
#X obj 376 29 symbol;
#X msg 140 403 ($v1%6536)|($v1%(555+$f2));
#X obj 206 46 r \$1-busy;
#X obj 523 105 select symbol;
#X obj 698 136 t s s;
#X obj 523 69 list append;
#X obj 779 43 loadbang;
#X msg 779 65 clear;
#X connect 1 0 3 0;
#X connect 1 1 2 0;
#X connect 1 2 11 0;
#X connect 2 0 35 0;
#X connect 3 0 10 0;
#X connect 4 0 6 0;
#X connect 5 0 7 0;
#X connect 8 0 1 0;
#X connect 9 0 12 0;
#X connect 10 0 4 0;
#X connect 10 1 5 0;
#X connect 11 0 0 0;
#X connect 12 0 15 0;
#X connect 13 0 42 0;
#X connect 15 1 16 0;
#X connect 16 0 14 0;
#X connect 16 1 15 1;
#X connect 17 0 18 0;
#X connect 18 0 9 0;
#X connect 20 0 37 0;
#X connect 21 0 19 0;
#X connect 21 1 22 0;
#X connect 22 0 19 1;
#X connect 25 0 24 0;
#X connect 26 0 25 0;
#X connect 27 0 25 0;
#X connect 29 0 25 0;
#X connect 30 0 25 0;
#X connect 31 0 8 0;
#X connect 31 0 34 0;
#X connect 32 0 4 0;
#X connect 33 0 5 0;
#X connect 34 0 38 0;
#X connect 35 0 0 0;
#X connect 37 0 21 0;
#X connect 39 0 17 0;
#X connect 40 1 41 0;
#X connect 41 0 31 0;
#X connect 41 0 36 0;
#X connect 41 1 40 1;
#X connect 42 0 40 0;
#X connect 43 0 44 0;
#X connect 44 0 0 0;
#X restore 288 267 pd dynamic_patching;
#X connect 1 0 13 0;
#X connect 3 0 16 0;
#X connect 4 0 17 0;
#X connect 5 0 6 0;
#X connect 6 0 9 0;
#X connect 6 1 7 0;
#X connect 7 0 3 1;
#X connect 8 0 10 0;
#X connect 9 0 4 0;
#X connect 10 0 9 0;
#X connect 10 1 9 1;
#X connect 11 0 8 0;
#X connect 12 0 14 0;
#X connect 13 0 12 0;
#X connect 14 0 2 0;
#X connect 16 0 0 0;
#X connect 17 0 3 0;
#X restore 287 115 pd engine;
#X obj 201 91 inlet~;
#X obj 288 88 inlet midi;
#X obj 384 103 inlet;
#X obj 380 167 line~;
#X obj 381 126 / 127;
#X msg 379 147 \$1 20;
#X obj 290 202 *~;
#X obj -30 -7 text define -k 8bit;
#A set ($v1%6536)|($v1%(555+$f2)) \; ($v1>>(11*$f2))|($v1%(11.2*$f2))
\; Autres possibilités (seule la première ligne est active) \; (t%656)|(t%(555+b))
\; (t%(11*a))|(t%(11.2*a)) \; t \; A faire : utiliser la nouvelle fonction
[list tosymbol] pour symplifier la syntaxe (remplacer $v1 par v \,
etc...) et faire un parser qui en même temps vérifie la syntaxe \,
et permettre la saisie à la volée \, comme chez caustic;
#X obj 136 11 r \$0-edit;
#N canvas 0 50 494 446 vol 0;
#X obj -3 -16 inlet~;
#X obj 79 335 outlet~;
#X obj 82 14 dbtorms;
#X text 159 13 Vol (0-127);
#X obj 80 98 line~;
#X obj 34 139 *~;
#X msg 80 66 \$1 20;
#X obj 184 -12 r \$0-vol;
#X obj 82 36 * 0.2;
#X connect 0 0 5 0;
#X connect 2 0 8 0;
#X connect 4 0 5 1;
#X connect 5 0 1 0;
#X connect 6 0 4 0;
#X connect 7 0 2 0;
#X connect 8 0 6 0;
#X restore 340 282 pd vol;
#X msg 39 38 click;
#X connect 0 0 2 0;
#X connect 3 0 10 0;
#X connect 4 0 1 0;
#X connect 5 0 3 0;
#X connect 6 0 8 0;
#X connect 7 0 10 1;
#X connect 8 0 9 0;
#X connect 9 0 7 0;
#X connect 10 0 13 0;
#X connect 12 0 14 0;
#X connect 13 0 1 0;
#X connect 13 0 2 0;
#X connect 14 0 11 0;
#X restore 103 287 pd audio_stuff;
#X obj 601 288 loadbang;
#X msg 601 313 freq 0.8 \, mod 1.8;
#N canvas 172 83 586 377 LICENSE-GPL 0;
#X text 57 88 This program is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public License
as published by the Free Software Foundation \, either version 3 of
the License \, or (at your option) any later version.;
#X text 58 168 This program is distributed in the hope that it will
be useful \, but WITHOUT ANY WARRANTY \; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.;
#X text 57 261 You should have received a copy of the GNU General Public
License along with this program. If not \, see <http://www.gnu.org/licenses/>.
;
#X text 61 54 Copyright (C) 2009 \, Reality Jockey Ltd.;
#X text 60 325 See the file LICENSE.txt for the full license text.
;
#X restore 298 15 pd LICENSE-GPL;
#N canvas 0 50 450 250 (subpatch) 0;
#X array \$0-scope 2000 float 0;
#X coords 0 1 1999 -1 200 140 1 0 0;
#X restore 236 311 graph;
#X obj 269 296 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 34 163 t f b;
#X obj 44 190 delay 100;
#X obj 33 214 f;
#X obj 39 263 int;
#X obj 33 327 s \$0-oct;
#X obj 469 396 u_parameter \$0 chain;
#X obj 342 60 tgl 15 0 empty empty play_random 17 7 0 10 -262144 -1
-1 0 1;
#X obj 341 76 tgl 15 0 empty empty TEST 17 7 0 10 -262144 -1 -1 0 1
;
#X obj 23 236 select;
#X obj 38 292 t f f;
#X obj 468 416 u_dispatch \$0 oct;
#N canvas 0 50 528 477 midi_gen 0;
#X obj 217 325 outlet;
#X obj 279 327 outlet;
#X obj 97 25 inlet;
#X obj 267 25 inlet;
#X obj 230 286 poly 1 1;
#X msg 334 251 69 70;
#X msg 341 219 69 0;
#X floatatom 406 238 5 0 0 0 - - -;
#X msg 406 257 \$1 70;
#X obj 127 92 makenote 100 100;
#X obj 127 115 pack 0 0;
#N canvas 145 50 577 652 random 0;
#X obj 100 99 select 1;
#X obj 100 35 inlet;
#X obj 174 203 * 200;
#X obj 174 231 t a a;
#X obj 449 409 outlet;
#X obj 174 144 random 4;
#X obj 174 169 + 1;
#X obj 174 268 delay;
#X obj 100 60 t a a;
#X obj 340 192 spigot 1;
#X obj 100 479 outlet;
#X obj 259 473 outlet;
#X obj 100 332 t b b b;
#X obj 269 39 inlet;
#X obj 449 380 - 1;
#X obj 259 367 random 40;
#X obj 259 387 + 40;
#X obj 100 451 m_majorscale 48;
#X obj 100 375 random 16;
#X connect 0 0 5 0;
#X connect 1 0 8 0;
#X connect 2 0 3 0;
#X connect 3 0 7 0;
#X connect 3 0 12 0;
#X connect 3 1 14 0;
#X connect 5 0 6 0;
#X connect 6 0 2 0;
#X connect 7 0 9 0;
#X connect 8 0 0 0;
#X connect 8 1 9 1;
#X connect 9 0 5 0;
#X connect 12 0 18 0;
#X connect 12 2 15 0;
#X connect 13 0 2 1;
#X connect 14 0 4 0;
#X connect 15 0 16 0;
#X connect 16 0 11 0;
#X connect 17 0 10 0;
#X connect 18 0 17 0;
#X restore 127 56 pd random notes;
#X obj 303 180 select 0 1;
#X obj 12 71 inlet midi;
#X connect 2 0 11 0;
#X connect 3 0 12 0;
#X connect 4 1 0 0;
#X connect 4 2 1 0;
#X connect 5 0 4 0;
#X connect 6 0 4 0;
#X connect 7 0 8 0;
#X connect 8 0 4 0;
#X connect 9 0 10 0;
#X connect 9 1 10 1;
#X connect 10 0 4 0;
#X connect 11 0 9 0;
#X connect 11 1 9 1;
#X connect 11 2 9 2;
#X connect 12 0 6 0;
#X connect 12 1 5 0;
#X connect 13 0 4 0;
#X restore 216 263 pd midi_gen;
#X obj 467 352 u_dispatch \$0 A;
#X obj 468 373 u_dispatch \$0 B;
#X obj 218 237 route note;
#X obj 467 441 u_dispatch \$0 vol;
#X obj 100 236 inlet~;
#X obj 140 207 inlet~;
#X obj 66 454 outlet~;
#X obj 146 457 outlet~;
#X obj 323 209 inlet data;
#X obj 322 265 outlet data;
#X obj 101 101 cnv 15 188 68 \$0-background \$0-background-rcv inst_8bits-0
0 7 0 14 -262144 -1 0;
#X obj 459 174 module_loader inst_8bits \$0 \$1;
#X obj 101 121 bng 30 250 50 0 \$0-edit empty EDIT 0 20 0 10 -262144
-1 -1;
#X obj 35 137 r \$0-oct;
#X obj 131 115 ui_vs \$0 oct -10.2 10.2;
#X obj 170 114 ui_vs \$0 A 1 256;
#X obj 220 102 vsl 70 17 1 0 0 0 \$0-presets \$0-presets-rcv Preset1
2 7 0 10 -232576 -232576 -1 0 1;
#X obj 209 115 ui_vs \$0 B 1 256;
#X obj 252 115 ui_vs \$0 vol 0 127;
#X symbolatom 101 151 26 0 0 0 - #0-chain-rcv #0-chain;
#X obj 258 365 tabwrite~ \$0-scope;
#X obj 651 279 namecanvas \$0-this;
#X obj 649 256 triggered_loadbang \$0-this;
#X text 644 206 manually trigger loadbang if the instance of abstraction
is created dynamically, f 29;
#X obj 571 135 savestate;
#X obj 584 33 declare -path ../../../core;
#X obj 584 53 declare -path ../../../core/stuff;
#X obj 584 73 declare -path ../../../core/rj;
#X connect 0 0 24 0;
#X connect 0 0 38 0;
#X connect 0 1 25 0;
#X connect 1 0 2 0;
#X connect 2 0 18 0;
#X connect 5 0 38 0;
#X connect 6 0 8 1;
#X connect 6 1 7 0;
#X connect 7 0 8 0;
#X connect 8 0 14 0;
#X connect 9 0 15 0;
#X connect 11 0 16 0;
#X connect 12 0 17 1;
#X connect 13 0 17 2;
#X connect 14 1 9 0;
#X connect 15 0 10 0;
#X connect 15 1 14 1;
#X connect 16 0 21 0;
#X connect 17 0 0 2;
#X connect 17 1 0 3;
#X connect 18 0 19 0;
#X connect 19 0 11 0;
#X connect 20 0 17 0;
#X connect 22 0 0 0;
#X connect 23 0 0 1;
#X connect 26 0 20 0;
#X connect 26 0 27 0;
#X connect 29 0 18 0;
#X connect 29 1 42 0;
#X connect 31 0 6 0;
#X connect 42 0 29 1;
#X connect 42 1 29 2;
#X coords 0 -1 1 1 190 70 1 100 100;
